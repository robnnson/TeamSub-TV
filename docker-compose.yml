services:
  postgres:
    image: postgres:16-alpine
    container_name: signage-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_DATABASE:-signage_cms}
      POSTGRES_USER: ${DB_USERNAME:-signage}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-signage_password}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-signage}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: signage-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: signage-backend
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:3000"
    volumes:
      - ./media:/app/media
      - ./backend/src:/app/src
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${PORT:-3000}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${DB_USERNAME:-signage}
      DB_PASSWORD: ${DB_PASSWORD:-signage_password}
      DB_DATABASE: ${DB_DATABASE:-signage_cms}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3001}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run start:dev

  frontend-admin:
    build:
      context: ./frontend-admin
      dockerfile: Dockerfile
    container_name: signage-admin
    restart: unless-stopped
    ports:
      - "${ADMIN_PORT:-8080}:80"
    depends_on:
      - backend

  frontend-display:
    build:
      context: ./frontend-display
      dockerfile: Dockerfile
    container_name: signage-display
    restart: unless-stopped
    ports:
      - "${DISPLAY_PORT:-8081}:80"
    depends_on:
      - backend

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: signage-network
